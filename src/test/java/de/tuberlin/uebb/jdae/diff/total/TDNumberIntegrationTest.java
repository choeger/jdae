/*
 * Copyright (C) 2012 uebb.tu-berlin.de.
 *
 * This file is part of modim
 *
 * modim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * modim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with modim. If not, see <http://www.gnu.org/licenses/>.
 */
package de.tuberlin.uebb.jdae.diff.total;

import java.util.Collection;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.google.common.collect.Lists;
import com.google.common.collect.ObjectArrays;

import static org.hamcrest.Matchers.is;

import static org.junit.Assert.assertThat;

@RunWith(Parameterized.class)
public class TDNumberIntegrationTest {

    public final TDNumber lengthConstraint(final TDNumber x, final TDNumber y) {
        return x.pow(2).add(y.pow(2)).add(-1);
    }

    @Parameters
    public static Collection<Object[]> data() {
        final List<Object[]> data = Lists.newArrayList();
        for (Object[][] points : example) {
            final Object[] params = ObjectArrays.concat(points[0], points[1],
                    Object.class);
            data.add(params);
        }
        return data;
    }

    /* just some completely arbitrary points, randomly generated */
    final static Object[][][] example = {
            { { 0, 0, 0 }, { 0, 0, 0 } },
            { { 1, 0, 0 }, { 0, 0, 0 } },
            { { 0, 0, 0 }, { 1, 0, 0 } },
            { { 0.5, 1, 0 }, { 1, 0, 0 } },
            { { 0, 1, 0 }, { 1, 0, 0 } },
            { { 0, 0, 0 }, { 1, 1, 0 } },
            { { 1, 0.5, 1 }, { 1, 0, 0.5 } },
            { { 0.5, 0, 1 }, { 1, 0, -1 } },
            { { 4.600000000e+00, 3.300000000e+00, -1.800000000e+00 },
                    { -2.500000000e+00, -7.000000000e-01, -1.300000000e+00 } },
            { { -2.700000000e+00, 1.200000000e+00, 2.700000000e+00 },
                    { -1.400000000e+00, 2.600000000e+00, 4.700000000e+00 } },
            { { -3.700000000e+00, 1.000000000e+00, -3.400000000e+00 },
                    { -4.800000000e+00, -1.700000000e+00, 3.300000000e+00 } },
            { { 8.000000000e-01, -1.900000000e+00, -1.900000000e+00 },
                    { -5.000000000e+00, 1.800000000e+00, -6.000000000e-01 } },
            { { -3.000000000e-01, 4.200000000e+00, -1.700000000e+00 },
                    { 0.000000000e+00, 2.000000000e+00, -2.900000000e+00 } },
            { { 2.700000000e+00, 1.600000000e+00, -4.600000000e+00 },
                    { -9.000000000e-01, -2.700000000e+00, 2.900000000e+00 } },
            { { 2.800000000e+00, 2.900000000e+00, -8.000000000e-01 },
                    { 3.700000000e+00, -3.500000000e+00, -3.200000000e+00 } },
            { { 3.500000000e+00, -2.200000000e+00, -4.000000000e+00 },
                    { -4.900000000e+00, 1.200000000e+00, 2.500000000e+00 } },
            { { -3.400000000e+00, 3.000000000e-01, -4.300000000e+00 },
                    { 2.900000000e+00, 3.000000000e-01, -4.300000000e+00 } },
            { { 6.000000000e-01, -5.000000000e+00, 4.900000000e+00 },
                    { 3.900000000e+00, 0.000000000e+00, -4.900000000e+00 } },
            { { -4.000000000e+00, 9.000000000e-01, 1.700000000e+00 },
                    { -3.000000000e-01, -4.900000000e+00, -2.700000000e+00 } },
            { { -2.400000000e+00, -3.900000000e+00, -4.800000000e+00 },
                    { -5.000000000e+00, 4.900000000e+00, -3.300000000e+00 } },
            { { 0.000000000e+00, 3.400000000e+00, 2.700000000e+00 },
                    { 4.300000000e+00, -3.300000000e+00, 2.100000000e+00 } },
            { { 1.800000000e+00, 1.600000000e+00, -2.600000000e+00 },
                    { 2.500000000e+00, -5.000000000e-01, 2.700000000e+00 } },
            { { -3.600000000e+00, -4.900000000e+00, -4.100000000e+00 },
                    { -3.600000000e+00, -2.800000000e+00, 4.200000000e+00 } },
            { { -3.000000000e-01, -1.700000000e+00, 1.000000000e-01 },
                    { -3.000000000e-01, 3.000000000e+00, 2.000000000e-01 } },
            { { 2.000000000e+00, -1.200000000e+00, 1.400000000e+00 },
                    { 2.200000000e+00, 2.100000000e+00, 1.300000000e+00 } },
            { { -2.900000000e+00, -2.900000000e+00, 2.900000000e+00 },
                    { -2.000000000e+00, -3.600000000e+00, -2.200000000e+00 } },
            { { -4.900000000e+00, 3.300000000e+00, 4.400000000e+00 },
                    { -2.400000000e+00, 4.000000000e+00, 2.200000000e+00 } },
            { { -1.500000000e+00, -4.500000000e+00, -4.500000000e+00 },
                    { -5.000000000e-01, 1.000000000e-01, -2.200000000e+00 } },
            { { -1.300000000e+00, -2.000000000e+00, 4.300000000e+00 },
                    { 3.800000000e+00, 2.700000000e+00, -4.500000000e+00 } },
            { { 2.300000000e+00, -3.000000000e-01, -7.000000000e-01 },
                    { 1.900000000e+00, 1.000000000e-01, -4.000000000e-01 } },
            { { 1.400000000e+00, -4.600000000e+00, 1.800000000e+00 },
                    { -7.000000000e-01, -1.600000000e+00, -3.600000000e+00 } },
            { { -4.700000000e+00, -1.400000000e+00, -2.100000000e+00 },
                    { 4.800000000e+00, 4.400000000e+00, 2.000000000e-01 } },
            { { -4.800000000e+00, -2.100000000e+00, 3.900000000e+00 },
                    { -4.300000000e+00, -4.400000000e+00, 2.200000000e+00 } },
            { { -1.500000000e+00, -7.000000000e-01, -4.800000000e+00 },
                    { 1.000000000e+00, 1.400000000e+00, 3.000000000e+00 } },
            { { 1.500000000e+00, 1.900000000e+00, -2.300000000e+00 },
                    { -9.000000000e-01, -1.200000000e+00, -3.900000000e+00 } },
            { { 3.700000000e+00, -4.800000000e+00, -3.500000000e+00 },
                    { 3.700000000e+00, 2.700000000e+00, 3.200000000e+00 } },
            { { -1.600000000e+00, 3.000000000e+00, 0.000000000e+00 },
                    { 1.300000000e+00, -4.000000000e+00, -6.000000000e-01 } },
            { { -3.500000000e+00, -3.800000000e+00, -4.500000000e+00 },
                    { -1.400000000e+00, -3.000000000e+00, -3.800000000e+00 } },
            { { -4.200000000e+00, 3.700000000e+00, 3.700000000e+00 },
                    { -3.900000000e+00, -2.000000000e-01, 1.000000000e-01 } },
            { { 4.100000000e+00, -5.000000000e-01, -3.000000000e+00 },
                    { 0.000000000e+00, 3.600000000e+00, 4.000000000e+00 } },
            { { 1.100000000e+00, -4.400000000e+00, 4.200000000e+00 },
                    { -4.100000000e+00, -2.500000000e+00, 1.900000000e+00 } },
            { { 4.100000000e+00, 9.000000000e-01, 3.200000000e+00 },
                    { -9.000000000e-01, -2.700000000e+00, 4.200000000e+00 } },
            { { 3.500000000e+00, 2.000000000e+00, -4.500000000e+00 },
                    { -2.800000000e+00, -4.300000000e+00, 7.000000000e-01 } },
            { { -1.600000000e+00, -3.500000000e+00, -6.000000000e-01 },
                    { 4.000000000e-01, 8.000000000e-01, -2.600000000e+00 } },
            { { -4.500000000e+00, -1.000000000e-01, -4.800000000e+00 },
                    { 8.000000000e-01, -1.800000000e+00, 3.800000000e+00 } },
            { { -2.000000000e-01, -2.500000000e+00, -2.400000000e+00 },
                    { 2.300000000e+00, -1.600000000e+00, 2.000000000e-01 } },
            { { 2.400000000e+00, -2.500000000e+00, -3.900000000e+00 },
                    { 6.000000000e-01, 1.600000000e+00, 1.600000000e+00 } },
            { { 3.100000000e+00, 3.300000000e+00, -1.300000000e+00 },
                    { -3.200000000e+00, -4.400000000e+00, 2.600000000e+00 } },
            { { 2.500000000e+00, 2.200000000e+00, -2.700000000e+00 },
                    { 1.000000000e-01, -2.400000000e+00, 3.200000000e+00 } },
            { { -4.200000000e+00, 1.400000000e+00, 1.300000000e+00 },
                    { -4.000000000e+00, 4.000000000e-01, 4.500000000e+00 } },
            { { -2.000000000e+00, -4.800000000e+00, -2.900000000e+00 },
                    { 7.000000000e-01, -4.300000000e+00, 3.700000000e+00 } },
            { { -4.100000000e+00, 3.200000000e+00, -3.700000000e+00 },
                    { 2.000000000e-01, 2.000000000e+00, -3.900000000e+00 } },
            { { -3.100000000e+00, 1.000000000e-01, 4.500000000e+00 },
                    { 6.000000000e-01, 1.900000000e+00, -1.700000000e+00 } },
            { { 1.400000000e+00, 2.600000000e+00, -1.300000000e+00 },
                    { 3.700000000e+00, -2.200000000e+00, 1.400000000e+00 } },
            { { -4.900000000e+00, 1.800000000e+00, 1.000000000e+00 },
                    { 1.500000000e+00, 2.800000000e+00, -3.600000000e+00 } },
            { { 4.200000000e+00, -4.200000000e+00, -2.000000000e-01 },
                    { -5.000000000e-01, 1.500000000e+00, 6.000000000e-01 } },
            { { -1.700000000e+00, -4.400000000e+00, 2.000000000e+00 },
                    { 2.800000000e+00, 9.000000000e-01, -1.000000000e+00 } },
            { { 3.900000000e+00, -4.000000000e+00, 4.200000000e+00 },
                    { -3.400000000e+00, 4.800000000e+00, 4.300000000e+00 } }

    };

    private final double x, dx, ddx;
    private final double y, dy, ddy;

    public TDNumberIntegrationTest(double x, double dx, double ddx, double y,
            double dy, double ddy) {
        this.x = x;
        this.dx = dx;
        this.ddx = ddx;
        this.y = y;
        this.dy = dy;
        this.ddy = ddy;
    }

    @Test
    public void testLengthConstraintPartialDerivative0() {
        final TDOperations ops = TDOpsFactory.getInstance(0, 2);

        final TDNumber tx = ops.variable(0, x, dx, ddx);
        final TDNumber ty = ops.variable(1, y, dy, ddy);
        final TDNumber l = lengthConstraint(tx, ty);
        assertThat(l.der(0, 0), is(2 * x));
        assertThat(l.der(0, 1), is(2 * y));
    }

    @Test
    public void testLengthConstraintPartialDerivative1() {
        final TDOperations ops = TDOpsFactory.getInstance(1, 4);

        final TDNumber tx = ops.variable(0, 1, x, dx, ddx);
        final TDNumber ty = ops.variable(2, 1, y, dy, ddy);

        final TDNumber l = lengthConstraint(tx, ty);

        assertThat(l.der(0, 0), is(2 * x));
        assertThat(l.der(0, 2), is(2 * y));

        /* zero-derivative does not depend on derivatives */
        assertThat(Math.abs(l.der(0, 1)), is(0.0));
        assertThat(Math.abs(l.der(0, 3)), is(0.0));

        assertThat(l.der(1, 0), is(2 * dx));
        assertThat(l.der(1, 1), is(2 * x));

        assertThat(l.der(1, 2), is(2 * dy));
        assertThat(l.der(1, 3), is(2 * y));

    }
}
